This is an example of the decorator design pattern in C++. It is based on an example found in Head First Design Patterns and on an implementation of the decorator design pattern found here:
https://en.wikipedia.org/wiki/Decorator_pattern#C++

Compiling and Running:
The files provided in the .vscode folder should be sufficient to allow this program to run provided that the compiler path has been set.
Alternatively the makefil can be used to compile each class into its own object file and then into a single executable.
If none of these options works, running g++ *.cpp Beverages/*.cpp Beverages/Condiments/*.cpp.

Here are some notes that I thought were important about its implementation.

The getDescription function which is used as a base function for all of the beverage classes must be virtual. If that function is not virtual then the condiment classe, which are technically beverages, cannot change the behavior of the class and will instead use the default function instead of the custom one. 

In learning about this design pattern I also discovered the "never use new/delete" paradigm. Thus unique pointers are used so that new and delete are handled automatically.

It is also worth noting that std::move is used here. Doing this allows the base component of the decorator to be used for the function call at the end instead of needing to call the method on the derived decorator components as done in this example https://refactoring.guru/design-patterns/decorator/cpp/example.